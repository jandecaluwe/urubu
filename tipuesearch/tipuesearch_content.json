{
    "pages": [
        {
            "tags": "",
            "text": "",
            "title": "Search results",
            "url": "/search.html"
        },
        {
            "tags": "",
            "text": "15-Aug-2018: Urubu 1.3.1 released For websites, not just blogs Set up a website as logically related content. Content\nordering is flexible , not just by date. Focus on navigation Easily set up a navbar, a table of contents sidebar,\nbreadcrumbs and pagers. Ready for Bootstrap Urubu plays well with Bootstrap , the popular framework\nfor great looking websites. Markdown content Enter content in light-weight Markdown syntax, with\npopular extensions. Wiki links Easily refer to other pages like\nin wikis , using Markdown syntax. Powerful templating Use the powerful Jinja2 templating library to \ndefine page layouts. Sophisticated control Per-page control of page layout \n  and other stuff. Plus user-defined variables . Python power Urubu is built with Python. It provides Python hooks to assist in templating. Ideal with git Use a git workflow to develop\nyour website. Deploy by pushing. And of course, it's open source!",
            "title": "Urubu",
            "url": "/index.html"
        },
        {
            "tags": "",
            "text": "What is Urubu? Urubu is a tool to build static websites . The following sections will help\nyou to decide whether it is the right tool for you. Static versus dynamic A static website is the simple case. It consists of a set of fixed pages. The\nonly job of the web server is to serve the page that you request. The opposite is a dynamic website. In this case, you interact with a program on\nthe web server. Depending on the request, the web server program generates a\nresponse page on the fly. Clearly, a dynamic website supports a much more interactive and sophisticated\nweb experience. If this is what you need, you should consider a full-fledged\nCMS or CMS generator tool. There is a wide choice of them in the Python\nworld. On the other hand, a static website is great for performance, security and\nmaintainability. If you don't need the overhead of a dynamic CMS, it is a\nwise choice. Why a tool? One option is to write a static website by hand by editing the html code for\neach page. However, this quickly becomes an unpractical solution for two\nreasons. First, writing html is no fun. The markup overhead is error prone and makes it\ndifficult to read the actual content.  In Urubu, you use Markdown for\nauthoring instead.  Markdown is an almost zero overhead input format and feels\nlike a natural way to write content in plain text. Secondly, html pages have a lot of non-content overhead that is equal or\nsimilar across pages, such as navigation info. Duplicating and maintaining this\ninfo manually is error prone and time consuming. In Urubu, you use templates\n(also known as layouts) instead. They make it easy to define the common html\nstructure of a set of similar pages. Why Urubu? There is no shortage of static web site generators, including a lot of Python\nsolutions .   However, these tools are typically blog oriented. If\nyour website is primarily a blog, with content in reverse chronological order\nand with good support for tagging and archiving, there are many other solutions\nthan Urubu. On the other hand, if you view your website as a set of logically connected\ncontent pages, Urubu is an excellent choice . Urubu makes it it easy to define\na good navigation structure, so that a user is never \"lost\". This is especially\nimportant for technical content. Of course, you can also include a blog in an Urubu site.  Within a folder, you\ncan specify how the content should be ordered using an arbitrary key. For a\nblog, this would be reverse order by date. Urubu's ideal use case If you would like to develop a website like a software project, you will feel\nat home with Urubu. For example, you can maintain an Urubu site in a git or\nmercurial repository and use the workflows that these systems enable.  For\nexample, you can collaborate on GitHub or Bitbucket through pull\nrequests . Also, deployment can be as straightforward as pushing to an upstream\nrepository.",
            "title": "Overview",
            "url": "/start.html"
        },
        {
            "tags": "",
            "text": "Urubu 0.5 introduces tag support. Read my blog post for an introduction.",
            "title": "Urubu 0.5 released",
            "url": "/news/2014-09-08.html"
        },
        {
            "tags": "",
            "text": "This release adds markdown support for front-matter attributes. Read more »",
            "title": "Urubu 0.3 released",
            "url": "/news/2014-02-27.html"
        },
        {
            "tags": "",
            "text": "Maintenance release: bug fixes and small enhancements to existing features.\nSee the git log and the manual.",
            "title": "Urubu 1.3.1 released",
            "url": "/news/2018-08-15.html"
        },
        {
            "tags": "",
            "text": "This release adds support for Tipue Search, an open source search solution\nbased on Javascript in the browser. Read more in the chapter Adding Search in the manual.",
            "title": "Urubu 0.9.0 released",
            "url": "/news/2015-12-15.html"
        },
        {
            "tags": "",
            "text": "Urubu 0.7 adds features that make it more flexible to use. First, the release adds Python 3 support, from a single codebase.\nYou can use Python 2.7 or Python 3.4. Second, there is now a baseurl option to add a prefix to generated local\nURLs. More info » . On the other hand, the checklist extension has been removed as it caused issues\nwith reference id resolution.",
            "title": "Urubu 0.7: Python 3 support, baseurl option",
            "url": "/news/2015-03-07.html"
        },
        {
            "tags": "",
            "text": "Introducing Urubu, a Python-based micro CMS for static websites.\nRead about the rationale behind it .",
            "title": "Urubu 0.1 released",
            "url": "/news/2014-01-12.html"
        },
        {
            "tags": "",
            "text": "Highlights: Add posibility to override output filename. (#51). See the saveas attribute\nin the manual .\nAn example usage, see How do I make a sitemap? . The urubu serve command is more secure.  This is transparent to the user\n(#49). Added option for jinja2 to fail on undefined vars (#47). \nSee the strict_undefined attribute in the manual .",
            "title": "Urubu 1.3.0 released",
            "url": "/news/2016-11-14.html"
        },
        {
            "tags": "",
            "text": "The highlight of this release is support for Templating constructs in pages .",
            "title": "Urubu 1.2.0 released",
            "url": "/news/2016-02-12.html"
        },
        {
            "tags": "",
            "text": "This is a bug-fix release.",
            "title": "Urubu 0.3.1 released",
            "url": "/news/2014-03-18.html"
        },
        {
            "tags": "",
            "text": "This is a bug fix release.",
            "title": "Urubu 0.2.1 released",
            "url": "/news/2014-02-15.html"
        },
        {
            "tags": "",
            "text": "Release highlights: the urubu serve command automatically takes\nthe baseurl option into account (Pull request #27). when an undefined anchor is referred to in a page, a\nwarning is generated, just like for references to undefined pages (Issue #30). the layout attribute can be assigned null . In this\nway the page content can be used by other pages, but no html is generated for\nthe page itself. In addition, a significant effort was put into development robustness. In\nparticular, a regression test suite has been added. This is based on py.test and tox , so that both Python 2.7 and 3.4 are verified.",
            "title": "Urubu 0.8 released",
            "url": "/news/2015-11-22.html"
        },
        {
            "tags": "",
            "text": "This release adds experimental support for the <mark > tag. Read more in the manual: Support for the mark tag and in this blog post .",
            "title": "Urubu 1.1.0 released",
            "url": "/news/2016-01-10.html"
        },
        {
            "tags": "",
            "text": "This release adds support for the process_info Python hook.  This hook\nprovides a powerful way to assist in templating. Basically, it provides full\nPython power to inspect, verify, modify, and add page attributes. For example,\nyou can use it to define a default layout , or a specific layout for pages in a certain directory. Read more in the manual: The process_info hook . There is also a new keep_files configuration attribute, that lets you\npreserve files that would otherwise be ignored.  See the documentation .",
            "title": "Urubu 1.0.0 released",
            "url": "/news/2016-01-01.html"
        },
        {
            "tags": "",
            "text": "Urubu 0.6 improves on wiki links: now you can link to a location within a page. Read my blog post for more info.",
            "title": "Urubu 0.6 released",
            "url": "/news/2015-01-28.html"
        },
        {
            "tags": "",
            "text": "",
            "title": "Newsfeed",
            "url": "/news/index.html"
        },
        {
            "tags": "",
            "text": "This release adds support for github-style task lists.",
            "title": "Urubu 0.2 released",
            "url": "/news/2014-01-22.html"
        },
        {
            "tags": "",
            "text": "Release features: Run urubu serve from the top-level project directory. Programmable file extensions for site pages Introducing Urubu Quickstart : a quick way to set up a new Urubu project.",
            "title": "Urubu 0.4 and Urubu Quickstart released",
            "url": "/news/2014-05-25.html"
        },
        {
            "tags": "",
            "text": "I created Urubu to solve a personal problem: how to create and maintain\nwebsites for my projects. I open-sourced it \"in the hope it can be useful\".  On\nthis page I list a number of websites that are powered by Urubu. By others Sigasi Insights - Documentation for Sigasi's tools. Leonardo Uieda - Website about Leonardo's professional activities. PINGA lab - Site for the PINGA lab, a research group studying inverse\nproblems in geophysics. For others, by me Vlaamse sofrologen - Site of the flemish sophrologists (in Dutch) Troca Vins Naturels - Natural wines MyHDL MyHDL website - all about MyHDL, for users MyHDL development website - info for MyHDL developers Urubu Urubu Quickstart - the Quickstart companion site for Urubu Urubu Documentation - this site Personal Jan Decaluwe My site about professional activities Jan Decaluwe / Music My music projects Jan Decaluwe / Opinions My opinions, in Dutch",
            "title": "Websites powered by Urubu",
            "url": "/more/sites.html"
        },
        {
            "tags": "",
            "text": "Author The Urubu software is written by Jan Decaluwe . License The Urubu software is licensed under the GNU Affero General Public License . The content on this documentation website is licensed\nunder the CC-BY-SA License . Development The Urubu software is developed on GitHub in the Urubu repo . The documentation is developed as a website in a gh-pages branch in the same\nrepo. It can be accessed from the custom domain urubu.jandecaluwe.com but it\nis hosted on GitHub Pages . Theme The theme on this website uses the Bootstrap framework,\nand is based on stock Bootstrap . Trivia An urubu is a brazilian vulture. Urubu is also the 10th album of\nAntonio Carlos Jobim, one of my favorite song composers.",
            "title": "About this site",
            "url": "/more/about.html"
        },
        {
            "tags": "",
            "text": "GitHub repository Websites powered by Urubu About this site",
            "title": "More",
            "url": "/more/index.html"
        },
        {
            "tags": "",
            "text": "Introduction Urubu implements a number of Markdown extensions. These extensions do not\nchange or extend the Markdown syntax. Rather, they add interesting features by\nprocessing and rendering the Markdown source in more sophisticated ways. The extensions are described in more detail below. Project-wide reference ids Urubu implements a Markdown extension to resolve project-wide reference ids.\nThis means that all pages in the project are automatically available as\nreference ids, and can be referred to using Markdown's syntax for reference\nlinks. This feature is described in more detail in the sections Project-wide reference ids and Reference links . It is Urubu's most important extension and a fundamental feature of the\ntool. Bootstrap-specific extensions Urubu is designed to play well with Bootstrap .  To use certain Bootstrap\nfeatures, it has extensions that add Bootstrap classes to certain tags.\nMore specifically, the following classes are added: table Added to the <table> tag. This defines basic styling for tables. dl-horizontal Added to the <dl> tag that defines definition lists. This creates \na horizontal layout for definition lists in wide viewports. Support for the mark tag The html5 specification added a new tag to highlight text : the <mark> tag. For a good explanation of its purpose and the differences with the <strong> and <em> tags, see this answer on Stack Overflow . Urubu supports lightweight markup for this tag by taking advantage of a\nredundancy in Markdown. In standard Markdown, you can either use asterisks\n( * ) or underscores ( _ ) to indicate emphasis. With the Urubu extension, the\nunderscore ( _ ) version is rendered using <mark> instead. This is an experimental feature that may be taken out if there are\nserious objections, although at this point there do not seem to be\ndisadvantages. To disable the feature, the mark_tag_support variable\ncan be set to false in the _site.yml file.",
            "title": "Markdown extensions",
            "url": "/manual/extensions.html"
        },
        {
            "tags": "",
            "text": "The project directory A typical Urubu project directory looks as follows: Makefile\n_site.yml\n_layouts/_base.html\n         page.html\n         ...\n_python/__init__.py\n        validators.py\n        filters.py\ncss/...\njs/...\nindex.md\nfolder1/index.md\n        file1.md\n        pic1.png\n        ...\nfolder2/index.md\n        file2.md\n        file3.md\n        ... Files and directories with pathnames starting with an underscore _ are\nspecial. They are used during processing, but excluded from the built website.\nTheir function will be discussed below. The css and js directories are just an example of how CSS style sheets and\njavascript files could be organized. You can use any organization that you\nprefer. Content files are in Markdown format and should have the .md extension. You\nhave complete freedom in organizing them in directories. However, every\ndirectory should have an index.md file, including the top-level directory. Processing rules Urubu generates a website by processing the files and directory in the project\ndirectory, and putting the result in a _build subdirectory. The processing\ndepends on the pathname as follows: a Makefile is ignored and not copied to the build. files and directories starting with a dot . or\nunderscore _ are ignored and not copied to the build. Markdown files with extension .md are converted to a\nhtml file that is put into the build in the same relative location. all other files and directories are copied unmodified to the build in the\nsame relative location. As a result of the project organization and the build process, the structure of\nthe build matches the structure of the project directory.  The relative\nlocation of all files is thus preserved. Special files and directories _site.yml This file contains site configuration info in YAML format.\nCurrently, these are the predefined attributes: Attribute Description reflinks Holds a mapping from reference ids to link objects. baseurl Prefix for generated local URLs file_ext Change default file extension ( '.html' ) for processed .md files link_ext Change default file extension ( '.html' ) for links to site's pages ignore_patterns List of additional file names or globs to be ignored during processing keep_files List of explicit file names be kept, overriding any ignores strict_undefined Set the default behavior regarding undefined template variables Link objects, for the reflinks attribute, are a mapping with an url key that maps\nto the link URL and a title key that maps to the link title. The baseurl option mirrors the same feature in Jekyll .  It\nallows you to specify a prefix for all local URLs generated within your site.\nThis is necessary when your site will be served from a URL that has more than\njust the hostname. For example, on GitHub Pages sites are served from\nhttp://username.github.io/project_name/, so Urubu needs to include that /project_name/ in generated URLs pointing to local content. baseurl should be specified with no beginning or trailing slashes, e.g.: baseurl : prefix The file extension attributes, file_ext and link_ext , are both usually set to the\nsame value (i.e. '.php' ), unless the target site has .htaccess rewrite rules that\naffect the file extensions. Examples of this are sites that internally redirect pages like www.test.com/account to www.test.com/account.htm . For this case, one would need to set file_ext to '.htm' , so Urubu generated files have the .htm extension, whereas link_ext would\nbe set to '' , so that the a href links are directed to the files without extension. Otherwise, file_ext and link_ext should be set to the same extension, specially\nduring testing, so that the simple web server invoked by urubu serve works fine,\nas well as any web server that does not rewrite the file extensions of the requests. The ignore_patterns attribute specifies glob-style patterns to be ignored\nduring processing, in addition to the default ones according to the Processing Rules . In some cases you may explicitly want to keep certain files that would normally\nbe ignored. For example, you may have hidden files like .nojekyll to prevent\nJekyll processing, or .htaccess and .htpasswd for access control.  You can\nkeep such files in the build using the keep_files attribute. The strict_undefined attribute controls whether the build should\nsilently ignore undefined template variables or raise an error when they are\nencountered. If false or undefined, undefined template variables are treated\nas empty strings ( '' ). If true , the build will stop and raise an error. You can define additional attributes that will be made available as\nsite variables to the template engine. The following is an example of a _site.yml file: brand: Urubu\n\nreflinks:\n    content_license:\n        url: http://creativecommons.org/licenses/by-sa/3.0/\n        title: CC-BY-SA License\n    software_license:\n        url: http://www.gnu.org/licenses/agpl-3.0.txt\n        title: GNU Affero General Public License\n    markdown:\n        url: http://daringfireball.net/projects/markdown/\n        title: Markdown\n\nfile_ext: '.htm'  # Change default file extension ('.html')\nlink_ext: '.htm'  # Change default link extension ('.html') _layouts This directory contains the available layouts.\nThey are used by the Jinja2 template engine to render html pages.\nThe layout files should have the .html extension. _python This directory contains Python hooks for the template engine. Project-wide reference ids Urubu has the concept of project-wide reference ids.  You can use them to refer\nto link objects in your content and configuration.  Their definition comes\nfrom two sources: global reference ids are mapped to link objects in the _site.yml configuration file, as discussed earlier. all content pages and folders objects have reference ids. Project-wide references ids live in a single namespace. For pages and folders,\nthe id is a root-relative pathname starting with a slash / and without file\nextension. By convention, global reference ids should not start with a / . In your content and configuration info, you can also use relative reference\nids. Urubu will resolve them depending on the file location in the project. In\ncase of a name clash with a global reference id, you will have to disambiguate\nby adding pathname components. In accordance with Markdown conventions, reference ids are case-insensitive. Content files Content files are Markdown files with extension .md . They should start with\nYAML front matter that defines a number of attributes, as in the following example: ---\ntitle: Read me first\nlayout: page\ndate: 2014-01-15\n---\n<Markdown content> The following attributes are predefined: Attribute Description title Specifies the page title. Mandatory. layout Specifies the layout, without the .html extension, or null . Mandatory. date Specifies the date in YYYY-MM-DD format. Optional. tags A tag or list of tags for the content. saveas Allows overriding of the output filename. The layout attribute is mandatory, but can be given a null value.\nThis is useful when the page content is used by other pages, but\nno html output is required for the page itself. In addition, you can add arbitrary user-defined attributes. All attributes\nare made available as page object attributes to the template engine. Markdown in attributes Optionally, you can use markdown format in front matter attributes.  Markdown\nprocessing is enabled by adding a .md suffix to the attribute. The resulting\nhtml code will be stored in a synthesized attribute without the .md suffix. For example: ---\ntitle:\nlayout: page\nsummary.md: |\n    A summary of the page items as a list:\n\n    * item 1\n    * item 2\n    * item 3\n--- After processing, the page object will have a summary attribute with the html\ncode. Index files Index files with basename index.md are a special kind of content files.  They\nare used to specify the attributes and the content of a directory. There are\ntwo options to specify the content, explicitly with the content attribute or\nimplicitly using the order attribute. Attribute Description content Defines the content explicitly as a list of reference ids or local link objects. order Defines the attribute by which the content in the directory should be ordered. reverse Optional boolean attribute defines reverse order or not. Default is false . content and order are mutually exclusive; you should use one of the two options. A local link object is a mapping with either a url key to an url, or a ref key to a reference id as mandatory items. In addtion, you can specify a title\nwith a title key. The ordering attribute can be predefined or user-defined, but it should be\nspecified in each content file in the directory.  As an example, you can\nspecify that the content of a directory should be ordered as blog by the\nfollowing front matter in the index file: ---\ntitle: Blog\nlayout: blog_index\norder: date\nreverse: true\n--- Tag directory The optional top-level directory called tag has a predefined meaning.  Urubu\nuses the corresponding folder in the build to hold the tag-related content view\nthat it generates automatically. You can use the index file to set attributes\nsuch as the layout . However, the content will be generated by Urubu\nautomatically and needs not be set.",
            "title": "Project structure",
            "url": "/manual/structure.html"
        },
        {
            "tags": "",
            "text": "Introduction Welcome to Urubu! My name is Jan Decaluwe and I am Urubu's author. Urubu is a micro CMS for static websites.  The qualification \"micro* means that\nit has a small feature set, defined by what I need for my purposes.  To know\nwhether it is the right tool for you, check out Overview . Urubu's design philosophy is radical reuse of great software and ideas from\nothers. In the following sections, I will describe its concepts and how\nthey are implemented. Authoring In Urubu, content is entered in Markdown format. This is a lightweight format\nthat feels like a natural way to write content in plain text. Markdown support in Urubu is implemented by the Python-Markdown package, that\nconverts the format to html. Urubu also supports the industry standard Markdown Extra extensions, with useful features such as tables and definition\nlists. Urubu supports nicely rendered code blocks, an essential feature for software\nprojects documentation. Fenced Code Blocks are provided by the Markdown Extra\nextensions.  This lets you enter language-specific code blocks without the need\nfor indentation. The CodeHilite extension of Python-Markdown enables\nlanguage-specific syntax highlighting via the Pygments library. Configuration The configuration options in Urubu are kept minimal, in the spirit of \"There\nshould be one obvious way to do it\".  Where used, the configuration format is\nYAML, implemented by the PyYAML library. Configuration is mostly distributed, in the sense that every content file\nshould have a front matter , that specifies the title, layout, date and so on.\nThis idea is found in many tools, but Urubu reuses the technique from Jekyll .\nYAML front matter is specified between two sets of triple dashes. Urubu extends this configuration technique by treating index files specially.\nEach folder in the site should have an index file (called index.md ) that\nspecifies the ordered folder content. This can be done explicitly by listing\nthe files, or implicitly by specifying how the files should be ordered. Templating With templates you specify the html layout for a particular type of a page.\nIn a template you can mix plain html with control structures and variable\ninterpolation. The actual html page is generated by evaluating the template\nwith the appropriate evaluation context provided by Urubu. Urubu uses the Jinja2 templating language library. Theming A theme refers to the general look and feel of a web site. Partially this is\ndefined by the templates as discussed above. The other part is defined in style\nsheets, with a technique known as Cascading Style Sheets (CSS). Basically\nthis is a sophisticated technique to define how the various html elements\nshould be rendered by the web browser. With Urubu, you are free to design and use your own style sheets. However, it\nhas been developed with Bootstrap in mind.  Bootstrap is a\nprofessionally-designed framework with lots of useful predefined styles\ncomponents. Urubu generates html that is Bootstrap-friendly, and infers the\nappropriate template variables for certain Bootstrap components. A great feature of Bootstrap is that it is \"mobile first\". This means that your\nwebsite will automatically adapt to any platform - smartphone, tablet or\nwidescreen. A notable project is Bootswatch . This is a set of themes designed as drop-in\nreplacement for the stock bootstrap styles. This gives you an effortless\noption to change the look and feel of your website. Navigation I am a big fan of Steve Krug's book Don't make me think ,\nand I feel that the lessons from this book are still often ignored.\nActually, the lack of focus of other tools on these ideas are the\nmain reason why I wrote Urubu. A main concept is good navigation. Urubu supports various techniques\nby inferring navigation-oriented variables and making them available to\nthe template engine. Moreover, they work well with some well-defined\nand nicely style Bootstrap navigation components. In this way,\nyou can easily implement the following: a navbar for navigation between major sections table of contents of a page in a sidebar breadcrumbs previous and next pager buttons active page or section highlighting Other techniques, independent from Urubu, can also help. Note for example that\nthe sidebar on this page is \"affixed\": it moves as you scroll through the page,\nbut never leaves the viewport. (Note: this description assumes that the\nviewport is wide enough to accomodate the sidebar.) At any time, the full\nstructure of the page remains visible and available for navigation. This was\nimplemented by borrowing code from the Bootstrap theme. Project-wide reference ids Markdown defines the concept of a reference link. This is a way to refer to a\npage or an url using a reference id.  The syntax of a reference link is a\nreference id between square brackets, for example [intro] . Urubu supports the concept of project-wide reference ids.  First, global\nreference ids can be defined in the site configuration file.  Moreover, all\ncontent pages and folders have a corresponding reference id: their pathname\nwithout extension. In this case, reference links are similar to wiki links, the\ntypical way to link between pages in wiki's. Standard Markdown only resolves reference ids that are defined within the file.\nUrubu extends this behavior by resolving them over the project.  This feature\nis implemented as a Markdown extension. Note that it doesn't require new syntax. Project-wide reference ids are a unique Urubu feature. One of the messages of Steve Krug's book is that the text that you click should\nbe the title of the page where you land. Therefore, when you use reference\nlinks, Urubu will insert the page title in the generated html (unless you\nspecify an alternative text explicitly). Development and deployment You can develop a Urubu project is like a software project, from a git or\nmercurial repository.  This gives you best-in-class revision control.\nMoreover, all the workflows that these systems provide are available. For\nexample, you can develop your website collaboratively on GitHub or Bitbucket .  Finally, it is easy to automate deployment, triggered by a push\nof the generated site to an upstream repository.",
            "title": "Concepts",
            "url": "/manual/intro.html"
        },
        {
            "tags": "",
            "text": "Urubu works with modern versions of Python 2 and Python 3 using the same\ncodebase. More specifically, it requires Python 2.7 or Python 3.4. You can install Urubu using pip: pip install urubu To upgrade an existing installation to the\nlatest version, use: pip install --upgrade urubu If pip is not yet available on your system, follow the pip installation\ninstructions . You may want to install Urubu in an isolated environment using virtualenv . Urubu depends on a number of libraries that will automatically be installed if\nnot yet available: Python-Markdown , PyYAML , Pygments and Jinja2 . For a quick way to set up a new Urubu project, visit Urubu Quickstart .",
            "title": "Installation",
            "url": "/manual/install.html"
        },
        {
            "tags": "",
            "text": "Content In Urubu, content is entered in Markdown format. This is a lightweight format\nthat feels like a natural way to write content in plain text. Stock markdown has a small feature set. For example, it does not even\nsupport tables. For this reason, Urubu supports some extensions. In particular,\nit supports the Markdown Extra extensions that have become an industry\nstandard, as well as a few others. The most notable supported extensions are: Tables Attribute lists Abbrevations Definition Lists Fenced Code Blocks CodeHilite Code Urubu intents to offer good support for software projects. Therefore, it\nsupports nicely rendered code blocks. One part of the solution is Fenced Code Blocks , provided by the Markdown Extra\nextensions.  This lets you enter language-specific code blocks without the need\nfor indentation. The second part is the CodeHilite extension of Python-Markdown.  This\nextension enables language-specific syntax highlighting through the Pygments library. To properly render the highlighted code, you will need to add a syntax.css stylesheet. A good solution is to use the syntax stylesheet from\nGitHub . Reference links Stock Markdown supports \"reference links\" that are resolved by defining them\nlater in the file. For example, you can use [urubu] in your content and\nfurther on define it as follows: [urubu]: http://urubu.jandecaluwe.com This is nice for readability, but it all remains file based. Urubu extends this behavior by automatically resolving Project-wide reference ids .  This feature is implemented as a Markdown extension. Note that\nit doesn't require a syntax change. It enables page linking like in wikis. In addition, you can add a fragment, like #some-anchor , to the reference id.\nThis represents a link to an anchor within a page.  Since Urubu automatically\nadds slugified anchors to markdown headers, you can use those as targets.  For\ninstance, [authoring#reference-links] is a link to the current Reference links section.  You can also define your own anchors\nusing Attribute lists . Markdown supports reference links without a text.  In that case, Urubu inserts\nan appropriate text in the html.  For a reference link with no fragment, the\ntitle of the page is inserted.  For a reference link with a fragment, the\nfragment text is inserted. To make the result more readable, you can use\nnon-slugified fragment text.  For example, [authoring#Reference links] also\nlinks to the present section, and is rendered as Reference links .",
            "title": "Authoring",
            "url": "/manual/authoring.html"
        },
        {
            "tags": "",
            "text": "Overview Writing in Markdown is great, but sometimes you run into limitations. For those\ncases, Urubu supports a feature gratefully borrowed from Jekyll : using\ntemplating constructs in content pages. Basically, all content pages are processed by the templating engine before\ngoing to the Markdown processor. The full power of Jinja2 is thus available\nin your content pages. The usage of templating constructs in content pages is best explained with\nexamples. Therefore, we will start with some examples, and review the concepts\nafterwards. Example usage Task list icons Suppose you want to emulate GitHub style task lists, as follows: Task 1 Task 2 Task 1 An icon is used to show whether a task is still open or not. We can support this by defining well-named reusable variables in a dedicated\ntemplate file, as follows: {% set open = '<i class=\"fa fa-square-o\"></i>' %}\n{% set done = '<i class=\"fa fa-check-square-o\"></i>' %} Variables open and done now hold HTML code that refers to icons. In these\nexamples, I use the Font Awesome icon  library. You will need to add the\nappropriate reference to the icon stylesheet in your base template. Suppose these variables are defined in the file _layouts/util.html . We can\nimport them in any content page as follows: {% from 'util.html' import open, done %} Note that Urubu knows to look up util.html in the _layouts/ directory,\nbecause that is where templates should be located. Within the content page, we can use the variables as follows, to get the result\nas above: * {{ open }} Task 1\n* {{ done }} Task 2\n* {{ open }} Task 1 General icon interface Suppose you want a more general interface to icons, so that you can easily\nrefer to any icon by name. This can be done with a Jinja2 macro. A macro is\nlike a function that can take parameters: {% macro fa(name, class='') %}\n<i class=\"fa fa-{{name}} {{class}}\"></i>\n{% endmacro %} Again, we can import the macro fa in content pages: {% from 'util.html' import fa %} Then we can use it as follows, for example to refer to the Github icon: {{ fa('github') }} This gives the following result: We can pass additional CSS classes via the optional class parameter. The\nfollowing example gets the alternative Github icon in twice the basic size: {{ fa('github-alt', 'fa-2x') }} This gives the following result: Figure Standard Markdown does not support the HTML5 <figure> tag, and the related <figcaption> tag to add captions. We can support this with the following\nmacro: {% macro figure(fn, caption='') %}\n<figure>\n  <img src=\"/img/{{fn}}\" class=\"img-responsive\" alt=\"{{caption}}\">\n  {% if caption %}\n  <figcaption class=\"text-center\">{{caption}}</figcaption>\n  {% endif %}\n</figure>\n{% endmacro %} This macro assumes that images will be placed in an img/ directory. In\naddition, it makes the image responsive using a Bootstrap class, and centers\nthe optional caption.  Again, we can use the macro by importing: {% from 'util.html' import figure %} This is an example usage: {{ figure('urubu.jpg', \"An Urubu - a brazilian vulture\") }} This gives the following result: An Urubu - a brazilian vulture Templating concepts Template processing is done first The examples illustrate how you can use template variables and macros to\nconstruct HTML code. However, it is important to understand that template\nprocessing is done first, before Markdown processing (for good reasons).  Thus,\nthe HTML code from variables and macros first becomes part of Markdown source\ncode.  This works well because Markdown is designed to handle HTML\ntransparently. Full template power available The examples demonstrate the use of variables, macros, and imports.  This is\nmerely the beginning: in fact, the full power of Jinja2 templates is available.\nThis is a vast subject. To learn what is possible, see the Jinja2 Template\nDesigner Documentation . Context variables When Urubu invokes template processing on a page, it automatically passes\ncertain context variables.  This works exactly like for regular templates, as\ndescribed in Context Variables . Basically, variable this provides access to the page attributes, and variable site provides access to\nthe global site attributes. Template delimiters Template support introduces new delimiters as follows: {# ... #} for comments not included in the output {{ ... }} for expressions, to print to the output {% ... %} for statements These delimiters deserve some attention. First, the comment delimiters are interesting because they add a functionality\nthat is not available in Markdown: comments that will not show up in the\noutput. Secondly, as always with delimiters, there is the problem of how to escape them\nif you want to use them literally in source code, without interpretation. For an inline literal or snippet you can use literal expressions.  For example,\nto get {{ you can write {{ '{{' }} . For a larger section, you can mark a block raw . For example, to\nget the list shown earlier in this section, you can write: {% raw %}\n* `{# ... #}` for comments not included in the output\n* `{{ ... }}` for expressions, to print to the output\n* `{% ... %}` for statements\n{% endraw %}",
            "title": "Templating constructs in pages",
            "url": "/manual/templating-in-pages.html"
        },
        {
            "tags": "",
            "text": "Overview Templates define the html layout for a particular page type.  In a template you\ncan mix plain html with control structures and variable interpolation. The html\npage is generated by evaluating the template with the appropriate evaluation\ncontext, provided by Urubu. Templates are part of the website project setup. If you are a content\ncontributor, you may not have to worry about them.  All you have to do is\nspecify the appropriate layout name in the YAML front matter of your content\nfiles. In general, it is better to do programming in Python code.  However, for the\npurpose of generation of pages in a format such as html, this is not very\npractical.  Therefore, a template contains both html and programming\nconstructs. Template programming is good for common tasks like the following: iteration over a list of items testing whether an item is defined filtering items, possibly with user-defined filters comparing the loop item object with the current object, to check whether it is active Urubu interacts with templates by providing an evaluation context with the\nappropriate objects.  The goal is to make the job of the templates as easy as\npossible with ready-to-use object attributes. The template library Urubu uses the Jinja2 templating language library. Jinja2 has great documentation and you should\ncheck it out when using templates in Urubu. A great feature of Jinja2 is template inheritance. With this technique,\nyou can easily generate small variations of a parent template. Link objects Description Link objects are the primary objects that you use in templates. \nThey come in a number of flavours: Link object Description global link object Defined in the _site.yml file. local link object Defined locally in the content attribute of an index file. folder object Corresponds to a project subdirectory. page object Corresponds to a Markdown content file. tag folder object Dedicated folder for content ordered by tag. tag object Represents content corresponding to a specific tag. Attributes Link objects have attributes. The defined attributes depend on the type of the\nlink object. The following attributes are common to all link objects : Attribute Description url The url of the object. title The title of the object. All link objects except local link objects also\nhave an id attribute: Attribute Description id The unique id by which the object is known in the project. Folder and page objects have the following attributes: Attribute Description fn The pathname of the file or directory corresponding the object. components The components of the object's pathname, without file extension, as a list. mdate Modification date Folder objects also have a content attribute: Attribute Description content The content of the folder as a list of page & folder objects. In addition, all attributes specified in the YAML front matter\nof the corresponding index file will be available as attributes of\nthe folder object. Page objects have the following additional attributes: Attribute Description layout The template to render the object as a html file. body The page content in html. toc The table of contents of the page as an unordered html list. breadcrumbs Breadcrumbs as a list. The current page object is at position 0, the containing folder objects are at the higher positions. prev The previous page object in the content, or None if there is none next The next page object in the content, or None if there is none In addition, all attributes specified in the YAML front matter of the\ncorresponding content file are available as attributes of the page object. Index pages Index pages are associated with index.md files. They are special in the sense\nthat they define the attributes and the content of a folder. Therefore, they\nhave the same content attribute as the corresponding folder object. Tag objects Tag objects are inferred by Urubu automatically. They list the content\ncorresponding to a tag. Attribute Description id /tag/{{tag}} components [tag, {{tag}}] title tag tag tag layout tag content List of page & folder objects corresponding to tag . The tag content is ordered by date, most recent first. If the date is not\ndefined, the modification date is used as a fallback ( mdate attribute). The layout name is predefined to tag . You have to provide the tag.html template to trigger the rendering of tag objects. In the simplest case, it\nmay be sufficient to inherit from a general index layout. Tag folder object The tag folder object is a special top-level folder whose id is /tag . Urubu\ninfers tag-related content for this folder automatically. You can optionally create the corresponding directory in the source code, and\nuse the index file to set attributes such as the layout . In any case, Urubu\nwill create the object if tags are used, and infer the content attribute. Attribute Description id /tag components [tag] content A list of tag objects, inferred by Urubu. The content is ordered according to the content size of tag objects,\nthe largest one first. Context variables Urubu makes the context available to templates with\ntwo context variables. site This variable holds site-wide information. It has one predefined attribute: Attribute Description reflinks A mapping from all reference ids to link objects. Note that the id of the root object is / . Starting from there,\nyou can traverse the whole site. In addition, all the attributes specified in the _site.yml file\nwill be available as attributes of the site variable. this This variable holds the current page or tag object.",
            "title": "Templates",
            "url": "/manual/templates.html"
        },
        {
            "tags": "",
            "text": "The urubu command After installation, an urubu command will be available. If you prefer, you can call the installed package as a script using python -m\nurubu , with the same effect. Subcommands The urubu command supports two subcommands. Run these commands from the top\nlevel project directory. urubu build Build the website.  The website will be in the _build subdirectory. urubu serve Start a local webserver to serve the website as you develop it.  The website\nwill be available at localhost:8000 . Run this command in a separate terminal\nwindow, and kill the server when you are done. Development flow I prefer to put the  commands in a Makefile, so that I can\nrun make to build and make serve to start a server. Currently, you have to build the site explicitly to see\nthe development changes in the browser.",
            "title": "Project building",
            "url": "/manual/building.html"
        },
        {
            "tags": "",
            "text": "Introduction A static site cannot natively support dynamic services. Fortunately, it is\noften an elegant solution to integrate third party solutions within a\nstatic site. One of the most prominent examples is Search. One possibility is integrating an\nexternal service such as Google Custom Search. The disadvantage is that one has\neither to pay for it or accept the branding. As an alternative, Urubu supports Tipue Search, an open source solution based\non javascript executed in the browser. As part of the site building, Urubu\ngenerates a view on the searchable content.  In this chapter, we describe how\nthe integration is accomplished. Installing Tipue Search The first step is to download the Tipue Search distribution It contains a tipuesearch directory. Copy that directory to the top level of your project.\nAs usual, Urubu copies it to the built website, so that the required\nstylesheets and javascript files are available in the expected location. Do not rename the tipuesearch directory. The existence of that\ndirectory triggers Urubu's support. Tipue Search has good documentation that you may want to review.  This\nchapter uses a slightly modified approach to achieve a good integration in a\ntypical Urubu project. The search box The next step is to create a search box. Suppose you want to make it part of\nthe navbar, as in the present site. This is achieved with the following html\ncode: <form class=\"navbar-form navbar-left\" action=\"/search.html\" role=\"search\">\n  <div class=\"form-group\">\n    <input type=\"text\" required name=\"q\" id=\"tipue_search_input\" class=\"form-control\" placeholder=\"Search\"> \n   </div>\n</form> The name and the id values in the <input> tag of the search box are\nmandatory for Tipue Search. The typical place for this code would be in the\nnavbar code in a basic layout for the site. The search results page The next step is to create a search result page. To integrate it we first\ncreate a dedicated layout using template inheritance.  Let us assume that is\nthere is  a head_addon and a body_addon block to add links and scripts to\nthe <head and the <body> section respectively. The search.html layout is\nthen as follows: {% extends \"page.html\" %}\n\n{% block head_addon %}\n<link href=\"tipuesearch/tipuesearch.css\" rel=\"stylesheet\">\n{% endblock %}\n\n{% block body_addon %}\n<script src=\"tipuesearch/tipuesearch_content.js\"></script>\n<script src=\"tipuesearch/tipuesearch_set.js\"></script>\n<script src=\"tipuesearch/tipuesearch.min.js\"></script>\n<script>\n$(document).ready(function() {\n     $('#tipue_search_input').tipuesearch({\n          'mode': 'json',\n          'contentLocation': 'tipuesearch/tipuesearch_content.json' \n     });\n});\n</script>\n{% endblock %} We inherit from a page.html layout. In the head_addon block, we add\nthe Tipue Search style sheet for the result page. In the body_addon page we\nadd the Tipue Search java script modules, and the inline script that generates\nthe results. This setup assumes that the jQuery javascript library itself is already loaded\nin the body of the parent layout, with a line like the following: <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js\"></script> If you use the Bootstrap javascript modules, that will be the case. In the top level project directory, we can then create a search.md files that\nuses the search.html layout and has the generated search results as its\ncontent: ---\ntitle: Search results\nlayout: search\n---\n\n<div id=\"tipue_search_content\"></div> After building the site, there will be a functional search.html file in the\ntop-level directory. Note The tipuesearch.css stylesheet also contains styling for the search\nbox. The result may be undesirable if you use your own styling, like in the\npresent website. The workaround is to comment the search box styling out. The search content The searchable content itself is a JSON object defined in the file tipuesearch/tipuesearch_content.json .  This is where Urubu kicks in: this\nfile is generated automatically. Extracting meaningful searchable content from a web site is not trivial. A\ndesign decision for Urubu was to use modern techniques to help with this. In\nparticular, Urubu will only consider content that is wrapped with the <main> tag. This is a relatively new html5 tag with exactly the purpose to indicate\nthe page content explicitly. The site designer should therefore review the site layouts and wrap all\nsearchable content with the <main> tag. Typically, this is the region were\nthe this.body variable is called in a template. Note The <main> tag is not supported in IE11. A popular workaround is to\nuse the html5shiv.js Javascript module. Layouts based on Bootstrap do\nthis already.",
            "title": "Adding Search",
            "url": "/manual/search.html"
        },
        {
            "tags": "",
            "text": "Introduction Urubu supports Python hooks to make templating easier. Upon a build, it tries\nto import a _python module or package, and looks for hook variables with\npredefined names.  The following hooks are defined: Variable Description filters A mapping from filter names to filter functions. process_info A function to inspect and process content file info. You have to make sure that these names are exported correctly.  For example, if\nyou organize _python as a package, it could look as follows: _python/\n    __init__.py\n    filters.py\n    hooks.py If filters is defined in filters.py , and process_info in hooks.py , the __init__.py file would contain: from .filters import filters\nfrom .hooks import process_info The filters hook Filters functions should be defined as custom filters in\nJinja2 . As a typical example, consider a filter that converts a date value into a\ndesired format. The filters.py module would contain the following: def dateformat(value, format=\"%d-%b-%Y\"):\n    return value.strftime(format)\n\nfilters = {}\nfilters['dateformat'] = dateformat You can then use the dateformat filter in templates. The process_info hook The interface of the process_info function is as follows: def process(info, site):\n    ... This function is called for every content file in the project. The site variable provides access to the site variables defined in _site.yml . The info variable contains the file content info as it is being\nconstructed by Urubu. At the moment of the call, the following\ninferred attributes are available: Attribute Description id The unique id by which the object is known in the project. url The url of the object. components The components of the object's pathname, without file extension, as a list. fn The pathname of the file or directory corresponding the object. mdate Modification date In addition, all attributes specified in the YAML front matter of the\ncorresponding content file are available as attributes of the info object. The site and info variables are Python dictionaries. This means that the\nattributes are available via key access, not via Python attribute access.  This\nis because the YAML reader constructs Python dictionaries from the front\nmatter. The process_info function can can inspect the attributes, verify and modify\nthem, and add additional ones. process_info examples Defining a default layout It can be handy to define a default layout for the case this mandatory\nattribute is not specified in the content file.  Suppose we want a default index layout for index files, and a page layout for other files: def process_info(info, site):\n    if 'layout' not in info:\n        if info['components'][-1] == 'index':\n            info['layout'] = 'index'\n        else:\n            info['layout'] = 'page' Defining a specific layout Suppose we have a blog directory and we want to automatically define a\nspecific post layout for blog posts: def process_info(info, site):\n    components = info['components']\n    if len(components) == 2:\n        if components[0] == 'blog' and components[1] != 'index':\n            process_post(info)\n\ndef process_post(info):\n    if not 'layout' in info:\n        info['layout'] = 'post'",
            "title": "Python hooks",
            "url": "/manual/hooks.html"
        },
        {
            "tags": "",
            "text": "Concepts Installation Project structure Authoring Project building Templates Templating constructs in pages Python hooks Markdown extensions Adding Search",
            "title": "Manual",
            "url": "/manual/index.html"
        },
        {
            "tags": "",
            "text": "The source structure of a project is preserved in the built website, and all\nnon-markdown content files are copied verbatim. See Project structure . Therefore, you can put media files at any convenient place in the source, and\nrefer to them using Markdown image syntax, with a relative or root-relative\npath to the source file.",
            "title": "How to add media files?",
            "url": "/faq/media-files.html"
        },
        {
            "tags": "",
            "text": "To generate a sitemap you need to do the following: Create a markdown file called sitemap.md like this: ---\ntitle: sitemap\nlayout: sitemap\nchangefreq: monthly\npriority: 1.0\nxmlns: http://www.google.com/schemas/sitemap/0.84\nsaveas: sitemap.xml\n--- Provide a sitemap.html in the _layouts directory, with looking something like the following: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"{{ this.xmlns }}\">\n{% for t in site.reflinks %}\n    {% if site.reflinks[t].fn and not site.reflinks[t].hidden %}\n    <url>\n        <loc>{{ site.hostname }}{{ site.reflinks[t].url }}</loc>\n        <changefreq>{{ this.changefreq }}</changefreq>\n        <priority>{{ this.priority }}</priority>\n    </url>\n    {% endif %}\n{% endfor %}\n</urlset> What makes this work is for the main part the saveas parameter in the sitemap.md file, which overrides the default output filename with sitemap.xml instead of sitemap.html",
            "title": "How do I make a sitemap?",
            "url": "/faq/sitemap.html"
        },
        {
            "tags": "",
            "text": "Yes, Urubu support links to page sections.\nRead this blog post to learn how.",
            "title": "Can I specify a link to a section in a page?",
            "url": "/faq/link2section.html"
        },
        {
            "tags": "",
            "text": "Yes: you can easily use MathJax with Urubu. Read more about it here .",
            "title": "Is there a way to render formulas?",
            "url": "/faq/formulas.html"
        },
        {
            "tags": "",
            "text": "Urubu is licensed under the GNU Affero General Public License . The first thing to understand is that this license applies only to the Urubu\nsoftware. It has no implications on website projects managed with Urubu. You\nare free to license your projects in any way you choose. The license only becomes relevant when you release a modified version of the\nUrubu software to the public in some way. In that case, you have to release the\nmodified source code also, under the same license. With the original GPL, a release meant shipping software to user that would\ninstall and run it locally.  However, these days software is often made\navailable by running it on a server.  Under the original GPL, there would be no\nrequirement to release the modified source code in such as case. This clearly\nviolates the spirit of the GNU Licenses. The GNU Affero General Public License fixes that problem. If you make the modified software\navailable by running it on a server, you have to make the modified source code\navailable to the users under the same license.",
            "title": "What are the licensing requirements?",
            "url": "/faq/licensing-requirements.html"
        },
        {
            "tags": "",
            "text": "Urubu supports tags. To use them, you need 2 things: Assign the desired tags to content pages, by assigning a tag or\na list of tags to the tags attribute.  See also: Content files . Provide a tag.html layout in the _layouts directory. It is the existence of the tag.html layout that triggers the generation of\ntag-related content. For example, if you have used tags bar and foo in the\nproject, you will see that the _build folder contains tag/bar/index.html and tag/foo/index.html . Those index files use the tag.html layout to show \nthe content related to a tag. Presumably, there is already a general index.html layout to show content in a\nfolder. An initial tag.html layout can then be a one-liner by using template\ninheritance, like so: {% extends \"index.html\" %} Of course, you may want to specialize the tag.html layout\nfurther to better reflect the purpose. Urubu also generates the corresponding tag objects so that you can use them in\nyour layouts. This is described in Tag objects . Note that the _build will contain a top-level tag folder, even when the\nsource directory does not. Optionally, you can define the tag folder in the\nsource also.  You can then define an index file and set attributes such as the layout to display the tags themselves.  However, the content will be\ngenerated by Urubu automatically and needs not be set. See also: Tag folder object .",
            "title": "How to use tags?",
            "url": "/faq/tags.html"
        },
        {
            "tags": "",
            "text": "Urubu version 0.8 and higher The urubu serve command  takes the baseurl setting automatically into\naccount. Urubu version 0.7 The urubu serve server does not include the baseurl prefix when serving\npages so sites that use baseurl can't be previewed locally using urubu\nserve .  An alternative option is to use tservice , which includes an option to\nserve a local static site with a URL prefix.  To use tservice with an Urubu\nsite instead of using urubu serve call tserve with the prefix option, e.g. tserve --prefix <baseurl> _build Where <baseurl> is your site's particular prefix.",
            "title": "How to preview sites that use the baseurl option?",
            "url": "/faq/baseurl-preview.html"
        },
        {
            "tags": "",
            "text": "What are the licensing requirements? How to add media files? How to preview sites that use the baseurl option? Can I specify a link to a section in a page? Is there a way to render formulas? How to use tags? How do I make a sitemap?",
            "title": "FAQ",
            "url": "/faq/index.html"
        }
    ]
}